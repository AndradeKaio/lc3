pub const MAX_SIZE: usize = (1 << 16) + 1;


pub struct Memory {
    slot: [u16; MAX_SIZE],
}

impl Memory {

    pub fn new() -> Memory {
        Memory {
            slot: [0; MAX_SIZE],
        }
    }

    pub fn read(self, address: u16) -> u16 {
        self.slot[address as usize]
    }
}


pub struct Registers {
    r0: u16,
    r1: u16,
    r2: u16,
    r3: u16,
    r4: u16,
    r5: u16,
    r6: u16,
    r7: u16,
    pc: u16,
    cond: u16,
    count: u16,
}

impl Registers {
    pub fn new() -> Registers {
        Registers{
            r0: 0,
            r1: 0,
            r2: 0,
            r3: 0,
            r4: 0,
            r5: 0,
            r6: 0,
            r7: 0,
            cond: 0,
            pc: 0,
            count: 0,
        }
    }
}

pub enum OpCode {
    Br= 0,
    Add,
    Load,
    Store,
    Jsr, //jump register
    And,
    Ldr, //load register
    Str,
    Not,
    Ldi, //load indirect
    Sti, //store indirect
    Jmp, //jump
    Lea, //load effective address
    Trap,

}


pub enum Flag {
    Pos = 1 << 0,
    Zero = 1 << 1,
    Neg = 1 << 2,
}


fn main() {
    const START: u16= 0x3000;
    let mut memory = Memory::new();
    let mut registers = Registers::new();
    registers.cond = Flag::Zero as u16;
    registers.pc = START;


    loop {
        
    }
}
